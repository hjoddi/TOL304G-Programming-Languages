;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    DESIGN DOCUMENT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Usage: make(a,b);
;;; Pre:   a and b are integers, b is not zero
;;; Value: The rational number a/b
;;;
;;; Usage: numerator(z)
;;; Pre:   z is a rational number
;;; Value: The numerator of z
;;;
;;; Usage: denominator(z)
;;; Pre:   z is a rational number
;;; Value: The denominator of z
;;;
;;; Usage: x+++y
;;; Pre:   x and y are rational numbers
;;; Value: The rational number x+y
;;;
;;; Usage: x---y
;;; Pre:   x and y are rational numbers
;;; Value: The rational number x-y
;;;
;;; Usage: x***y
;;; Pre:   x and y are rational numbers
;;; Value: The rational number x*y
;;;
;;; Usage: x///y
;;; Pre:   x and y are rational numbers, y is not zero
;;; Value: The rational number x/y
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"rational.mmod" =
!
{{

;;;
;;; Data invariant: A rational number with numerator p and
;;; denominator q is stored as a pair [p$q] with p and q
;;; being big integers having no common factors other than 1.
;;; q>0.
;;;

make =
	fun(p,q)
	{
		p = bigInteger(p);
		q = bigInteger(q);
		val g = gcd(p,q);
		if( q < 0 ) { (p,q) = (-p,-q) };
		[p/g$q/g]
	};
	
numerator = fun head(x);

denominator = fun tail(x);

+++ =
	fun(x,y)
	{
		val px=head(x), qx=tail(x), py=head(y), qy=tail(y);
		make(px*qy+py*qx,qx*qy)
	};

--- =
	fun(x,y)
	{
		val px=head(x), qx=tail(x), py=head(y), qy=tail(y);
		make(px*qy-py*qx,qx*qy)
	};

*** =
	fun(x,y)
	{
		make(head(x)*head(y),tail(x)*tail(y))
	};

/// =
	fun(x,y)
	{
		make(head(x)*tail(y),tail(x)*head(y))
	};
}}
*
!
{{
;;; Usage:  gcd(a,b)
;;; Pre:    a and b are integers.
;;; Value:  The greatest common divisor of a and b
gcd =
	fun(a,b)
	{
		if( a < 0 ) { a = -a };
		if( b < 0 ) { b = -b };
		if( a > b ) { (a,b) = (b,a) };
		while( a!=0 )
		{
			(a,b) = (b%a, a)
		};
		b
	};
}};

"test.mexe" = main in
!
{{
main =
	fun()
	{
		writeln("1/2+1/3="++show(make(1,2)+++make(1,3)));
		writeln("1/2-1/3="++show(make(1,2)---make(1,3)));
		writeln("1/2*1/3="++show(make(1,2)***make(1,3)));
		writeln("(1/2)/(1/3)="++show(make(1,2)///make(1,3)));
		writeln("1000000/1000001+1000002/1000003="++show(make(1000000,1000001)+++make(1000002,1000003)));
	};

show =
	fun(x)
	{
		numerator(x)++"/"++denominator(x)
	};
}}
*
"rational.mmod"
*
BASIS
;